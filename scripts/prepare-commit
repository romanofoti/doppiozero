#!/usr/bin/env python3
"""CLI wrapper for prepare-commit (generate commit message using LLM prompt)."""
import argparse


def prepare_commit(commit_message_prompt_path: str, llm_model: None = None) -> str:
    try:
        with open(commit_message_prompt_path, "r", encoding="utf-8") as f:
            prompt = f.read()
    except Exception as e:
        print(f"Error reading commit message prompt: {e}")
        return ""

    model_str = llm_model if llm_model else "default-llm"
    commit_message = f"[{model_str}] Semantic commit message: {prompt[:60]}..."
    return commit_message


def main():
    parser = argparse.ArgumentParser(prog="prepare-commit")
    parser.add_argument("--commit-message-prompt-path", required=True)
    parser.add_argument("--llm-model", default=None)
    args = parser.parse_args()

    msg = prepare_commit(args.commit_message_prompt_path, llm_model=args.llm_model)
    print(msg)


if __name__ == "__main__":
    main()
