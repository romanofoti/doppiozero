#!/usr/bin/env python3
"""CLI wrapper for semantic-search-github-conversations."""
import argparse
import json
import sys


def main():
    parser = argparse.ArgumentParser(prog="semantic-search-github-conversations")
    parser.add_argument("query", help="Free-text query")
    parser.add_argument("--collection", default=None)
    parser.add_argument(
        "--filters", action="append", default=[], help="Filter key:value (repeatable)"
    )
    parser.add_argument("--limit", type=int, default=10)
    parser.add_argument("--score-threshold", type=float, default=None)
    parser.add_argument("--order-by", default=None)
    parser.add_argument("--url", default=None)
    parser.add_argument("--format", choices=["yaml", "json"], default="yaml")
    parser.add_argument("--verbose", action="store_true")
    args = parser.parse_args()

    # Build filter dict from key:value pairs
    filters = {}
    for f in args.filters:
        if ":" in f:
            k, v = f.split(":", 1)
            filters[k] = v

    import random

    def semantic_search_github_conversations(
        query: str,
        collection: None = None,
        filters: None = None,
        limit: int = 10,
        score_threshold: None = None,
        order_by: None = None,
        url: None = None,
        output_format: str = "yaml",
        verbose: bool = False,
    ):
        results = []
        for i in range(1, limit + 1):
            score = round(random.uniform(0.6, 1.0), 2)
            if score_threshold and score < score_threshold:
                continue
            result = {
                "id": f"qdrant_{i}",
                "score": score,
                "payload": {
                    "url": f"https://github.com/octocat/Hello-World/issues/{200+i}",
                    "title": f"Issue {200+i} about '{query}'",
                    "topics": ["performance", "security"],
                    "collection": collection or "summaries",
                },
            }
            if filters:
                match = True
                for k, v in filters.items():
                    if k in result["payload"] and v not in str(result["payload"][k]):
                        match = False
                if not match:
                    continue
            results.append(result)
        if verbose:
            print(f"Semantic search results: {results}")
        return results

    results = semantic_search_github_conversations(
        args.query,
        collection=args.collection,
        filters=filters or None,
        limit=args.limit,
        score_threshold=args.score_threshold,
        order_by=args.order_by,
        url=args.url,
        output_format=args.format,
        verbose=args.verbose,
    )

    if args.format == "json":
        print(json.dumps(results, indent=2))
    else:
        print(json.dumps(results, indent=2))


if __name__ == "__main__":
    main()
