#!/usr/bin/env python3
"""CLI wrapper for semantic-search-github-conversations."""
import argparse
import json
import sys
from typing import Dict, Any

from doppiozero.contents import content_manager


def main():
    parser = argparse.ArgumentParser(prog="semantic-search-github-conversations")
    parser.add_argument("query", help="Free-text query")
    parser.add_argument("--collection", default=None)
    parser.add_argument(
        "--filters",
        action="append",
        default=[],
        help="Filter key:value (repeatable)",
    )
    parser.add_argument("--limit", type=int, default=10)
    parser.add_argument("--score-threshold", type=float, default=None)
    parser.add_argument("--order-by", default=None)
    parser.add_argument("--url", default=None)
    parser.add_argument("--format", choices=["yaml", "json"], default="yaml")
    parser.add_argument("--verbose", action="store_true")
    args = parser.parse_args()

    # Build filter dict from key:value pairs
    filters: Dict[str, str] = {}
    for f in args.filters:
        if ":" in f:
            k, v = f.split(":", 1)
            filters[k] = v

    # Call the real content manager (falls back if Qdrant not configured)
    try:
        hits = content_manager.vector_search(
            args.query,
            collection=args.collection or "summaries",
            qdrant_url=args.url,
            top_k=args.limit,
            filters=filters or None,
            order_by=args.order_by,
            score_threshold=args.score_threshold,
        )
    except Exception as e:
        print(f"Error running semantic search: {e}", file=sys.stderr)
        sys.exit(1)

    # Convert to upstream-like payload: {id, score, payload}
    out = []
    for i, h in enumerate(hits, start=1):
        payload: Dict[str, Any] = {
            "url": h.get("url") if isinstance(h, dict) else None,
            "title": h.get("summary") if isinstance(h, dict) else None,
            "executive_summary": h.get("summary") if isinstance(h, dict) else None,
            "collection": args.collection or "summaries",
        }
        item = {
            "id": h.get("url") or f"local_{i}",
            "score": h.get("score", 0.0),
            "payload": payload,
        }
        out.append(item)

    if args.format == "json":
        print(json.dumps(out, indent=2))
    else:
        # For now, output JSON even for yaml flag to avoid adding PyYAML dependency
        print(json.dumps(out, indent=2))


if __name__ == "__main__":
    main()
