#!/usr/bin/env python3
"""CLI wrapper for github-conversations-research-agent.

This script maps CLI flags to the Python `GitHubAgent` implementation and
runs the Flow. It's intentionally conservative: the heavy lifting remains in
the library so this CLI is a thin adapter.
"""
import argparse
import json
import sys

from doppiozero.agents.gh_deep_search import GitHubAgent


def main():
    parser = argparse.ArgumentParser(prog="github-conversations-research-agent")
    parser.add_argument("request", help="Natural language research request")
    parser.add_argument("--collection", required=True)
    parser.add_argument("--limit", type=int, default=5)
    parser.add_argument("--max-depth", type=int, default=2)
    parser.add_argument("--editor-file", default=None)
    parser.add_argument("--clarifying-qa", default=None)
    parser.add_argument("--search-modes", default=None)
    parser.add_argument("--cache-path", default=None)
    parser.add_argument("--fast-model", default=None)
    parser.add_argument("--reasoning-model", default=None)
    parser.add_argument("--parallel", action="store_true")
    parser.add_argument("--verbose", action="store_true")
    args = parser.parse_args()

    options = {
        "collection": args.collection,
        "limit": args.limit,
        "max_depth": args.max_depth,
        "editor_file": args.editor_file,
        "clarifying_qa": args.clarifying_qa,
        "search_modes": args.search_modes.split(",") if args.search_modes else None,
        "cache_path": args.cache_path,
        "models": {"fast": args.fast_model, "reasoning": args.reasoning_model},
        "parallel": args.parallel,
        "verbose": args.verbose,
    }

    try:
        agent = GitHubAgent(args.request, options)
        result = agent.run()
        print(json.dumps(result, indent=2))
    except Exception as e:
        print(f"Error running research agent: {e}", file=sys.stderr)
        sys.exit(1)


if __name__ == "__main__":
    main()
