#!/usr/bin/env python3
"""CLI wrapper for github-conversations-research-agent."""
import argparse
import json
import random


def semantic_search(q: str, n: int):
    return [
        {
            "url": f"https://github.com/octocat/Hello-World/issues/{i}",
            "title": f"Issue {i} about {q}",
            "score": round(random.uniform(0.7, 1.0), 2),
        }
        for i in range(1, n + 1)
    ]


def main():
    parser = argparse.ArgumentParser(prog="github-conversations-research-agent")
    parser.add_argument("request", help="Natural language research request")
    parser.add_argument("--collection", required=True)
    parser.add_argument("--limit", type=int, default=5)
    parser.add_argument("--max-depth", type=int, default=2)
    parser.add_argument("--editor-file", default=None)
    parser.add_argument("--clarifying-qa", default=None)
    parser.add_argument("--search-modes", default=None)
    parser.add_argument("--cache-path", default=None)
    parser.add_argument("--fast-model", default=None)
    parser.add_argument("--reasoning-model", default=None)
    parser.add_argument("--parallel", action="store_true")
    parser.add_argument("--verbose", action="store_true")
    args = parser.parse_args()

    clarifying_questions = [
        f"What aspect of '{args.request}' is most important?",
        "Are you interested in recent or historical conversations?",
        "Should we focus on issues, PRs, or discussions?",
        "Any specific repositories or authors to filter?",
    ]

    all_results = []
    for depth in range(args.max_depth):
        sub_query = f"{args.request} (pass {depth+1})"
        results = semantic_search(sub_query, args.limit)
        all_results.extend(results)

    report = {
        "question": args.request,
        "clarifying_questions": clarifying_questions,
        "results": all_results,
        "summary": f"Found {len(all_results)} relevant GitHub conversations for: '{args.request}'",
    }
    if args.verbose:
        print(f"Research agent report: {report}")
    print(json.dumps(report, indent=2))


if __name__ == "__main__":
    main()
