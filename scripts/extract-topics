#!/usr/bin/env python3
"""CLI wrapper for extracting topics from a GitHub conversation."""
import argparse
import sys
import os
import json
from typing import List, Optional
from doppiozero.utils.utils import safe_filename_for_url
from doppiozero.utils.utils import write_json_safe


def extract_topics(
    conversation_url: str,
    topics_prompt_path: str,
    cache_path: Optional[str] = None,
    max_topics: Optional[int] = None,
) -> List[str]:
    conversation_text = f"Conversation from {conversation_url}..."
    try:
        with open(topics_prompt_path, "r", encoding="utf-8") as f:
            prompt = f.read()
    except Exception as e:
        print(f"Error reading prompt file: {e}")
        return []

    base_topics = [
        "performance",
        "authentication",
        "database",
        "caching",
        "bug-fix",
        "security",
        "documentation",
    ]
    if max_topics is not None:
        topics = base_topics[:max_topics]
    else:
        topics = base_topics

    if cache_path:
        safe_url = safe_filename_for_url(conversation_url)
        cache_file = os.path.join(cache_path, f"topics_{safe_url}.json")
        try:
            write_json_safe(cache_file, topics)
        except Exception as e:
            print(f"Error writing cache file: {e}")

    return topics


def main():
    parser = argparse.ArgumentParser(prog="extract-topics")
    parser.add_argument("input", help="GitHub URL or owner/repo/type/number")
    parser.add_argument("--topics-prompt-path", required=True, help="Path to topics prompt file")
    parser.add_argument("--cache-path", default=None, help="Cache root directory")
    parser.add_argument(
        "--updated-at", default=None, help="Only fetch if remote is newer than this ISO timestamp"
    )
    parser.add_argument(
        "--max-topics", type=int, default=None, help="Maximum number of topics to return"
    )
    args = parser.parse_args()

    try:
        topics = extract_topics(
            args.input,
            topics_prompt_path=args.topics_prompt_path,
            cache_path=args.cache_path,
            max_topics=args.max_topics,
        )
        print(json.dumps(topics))
    except Exception as e:
        print(f"Error: {e}", file=sys.stderr)
        sys.exit(1)


if __name__ == "__main__":
    main()
